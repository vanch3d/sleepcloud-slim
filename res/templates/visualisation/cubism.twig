{% extends 'base.twig' %}

{% block title %}Horizon chart{% endblock %}

{% block content %}
    <div id="controller" class="d-flex p-2 flex-row" style="width: 100%;">
    </div>
    <div id="mapdiv" style="width: 960px;">
    </div>
    <div id="legend" style="width: 100%;"></div>
{% endblock %}

{% block injectCSS %}
    <style>
        .text-center {
            /*text-align: left !important;*/
        }

        .cover-container {
            /*max-width: none;*/
        }

        .horizon {
            overflow: visible !important;
        }
    </style>
{% endblock %}

{% block injectJS %}
    <script src="/js/d3.v3-bundle.js"></script>
    <script>
        $(document).ready(function () {
            // credits (see https://bost.ocks.org/mike/cubism/intro/demo-stocks.html)
            // credits (see https://square.github.io/cubism/demo/)

            // @todo[vanch3d] The rule/line is not working properly (out of div); to redo
            // @todo[vanch3d] Still a bug in computing date and time of metrics

            const DATA_INTERVAL = 5,   // measurement interval for the actigraph (in minutes)
                DATA_CUTOFF = 0.07,  // near-zero cut-off point for actigraph data
                DATA_UNSET = -0.01;  // data not recorded

            let fmtTitle = d3.time.format("%a %b %e"),
                fmtId = d3.time.format("%H:%M"),
                fmtYr = d3.time.format("%Y-%m-%d"),
                formatHour = d3.time.format("%H"),
                newFormat = d3.time.format("%Y-%m-%d %H:%M");

            let now = new Date();
            let context = cubism.context()
                .serverDelay(now - d3.time.hour.offset(d3.time.day(now), -12))   // delay server to 12noon previous day
                //.serverDelay(14 * 60 * 1000)
                .step(1 * 60 * 1000)    // 1 minutes per value
                .size(960)              // fetch 960 values (ie 16 hours)
                .stop();

            let axis = context.axis()
                .orient("top")
                .ticks(d3.time.minutes, 60)     // a tick every hour
                .tickFormat(d3.time.format("%H:%M"));

            d3.select("#mapdiv").call(function (div) {

                div.append("div")
                    .attr("class", "axis sticky-top")
                    .call(axis);

                div.append("div")
                    .attr("class", "rule")
                    .call(context.rule());

                let ret = [];
                let url = "{{ path_for('api.sleep.records') }}";

                d3.queue()
                    .defer(d3.json, url)
                    .await(function (error, file1, file2) {
                        if (error) {
                            console.error('Oh dear, something went wrong: ' + error);
                        }
                        else {
                            console.log(file1, file2);
                            let data = file1.data;

                            $.each(data, function (i, d) {
                                let sonar = (d.Comment.indexOf("#sonar") !== -1);
                                //console.log(d.Date,sonar);
                                let h1 = createActigraphMetric(new Date(d.From), d.Actigraph, sonar);
                                let h2 = createSleepPhaseMetric(new Date(d.From), d.Events);
                                if (h1) {
                                    h1.type = "actigraph";
                                    ret.push(h1);
                                }
                                if (h2) {
                                    h2.type = "phases";
                                    ret.push(h2);
                                }
                            });

                            let horizon = context.horizon();
                            div.selectAll(".horizon")
                                .data(ret.filter(function (d) {
                                    return true;
                                    return d.type === "actigraph";
                                }))
                                .enter().append("div")
                                .attr("class", "horizon")
                                .call(horizon.height(40).extent([-10, 10]));

                        }
                    });
            });

            context.on("focus", function (i) {
                $(".line").css("margin-left", $("#mapdiv").offset().left);
                d3.selectAll(".value").style("left", i == null ? null : i + "px");
            });

            /**
             * Create metrics based on sleep phase data extracted from the SleepCloud app
             */
            function createSleepPhaseMetric(date, dataset) {
                let values = [],
                    last = NaN;

                if (!dataset) return null;
                //console.log("dataset",dataset);

                let filtered = dataset.filter(function (d) {
                    return $.inArray(d.id, [
                        "LIGHT_START",
                        "LIGHT_END",
                        "DEEP_START",
                        "DEEP_END",
                        "REM_START",
                        "REM_END"]) !== -1;
                });

                let phases = d3.nest()
                    .key(function (h) {
                        return newFormat(new Date(h.date));
                    })
                    .entries(filtered);

                //console.log("phases",phases);

                function trickDate(a, b) {
                    let dKey = new Date(a);
                    let dStart = new Date(b);

                    dKey.setFullYear(
                        dStart.getFullYear(),
                        dStart.getMonth(),
                        dStart.getDate()
                    );

                    if (dKey.getHours() < 20)
                        dKey.setDate(dKey.getDate() + 1);
                    return dKey;

                }

                let metrics = context.metric(function (start, stop, step, callback) {
                    start = +start;
                    stop = +stop;

                    if (isNaN(last)) last = start;

                    // get the current (first) data point
                    let current = phases.shift();
                    let interpolations = null;
                    //  console.log(current);

                    if (current) {
                        let dKey = trickDate(current.key, start);
                        current.newkey = dKey;
                        //console.log("metrics",new Date(last),new Date(current.key),dKey);
                    }

                    // start ticking
                    while (last < stop) {
                        // if tick corresponds to a data record
                        if (current && (new Date(current.newkey) - last) === 0) {
                            //console.log("tick",new Date(last),current);
                            let lastItem = [...current.values].pop();
                            let val = NaN;
                            if (lastItem.id.includes("LIGHT")) val = -.5;
                            else if (lastItem.id.includes("REM")) val = -3;
                            else if (lastItem.id.includes("DEEP")) val = -7;

                            values.push(val);
                            interpolations = val;
                            if (lastItem.id.includes("END")) interpolations = NaN;

                            current = phases.shift();
                            if (current) {
                                let dKey = trickDate(current.key, start);
                                current.newkey = dKey;
                                //console.log("metrics",new Date(last),new Date(current.key),dKey);
                            }

                        }
                        else if (interpolations) {
                            values.push(interpolations);
                        }
                        else
                            values.push(NaN);

                        last += step;
                    }
                    callback(null, values = values.slice((start - stop) / step));

                }, fmtTitle(date));

                return metrics;

            }


            /**
             * Create metrics based on actigraph data extracted from the SleepCloud app
             */
            function createActigraphMetric(date, dataset, sonar) {
                let values = [],
                    last = NaN;

                // set midnight on day of data collection (From attribute)
                let d1 = d3.time.day(date);

                // @todo[vanch3d] check if clone is really necessary
                let newset = $.extend(true, [], dataset);

                let mMax = d3.max(newset, function (d) {
                    return d.value
                });
                let scale = d3.scale.linear()
                    .domain([0, mMax])
                    .range([0, 7]);
                //console.log(date,mMax);

                let metric = context.metric(function (start, stop, step, callback) {
                    start = +start;
                    stop = +stop;

                    if (isNaN(last)) last = start;

                    // get the current (first) data point
                    let current = newset.shift();
                    let interpolations = [];

                    // start ticking
                    while (last < stop) {
                        if (current) {
                            // compute timestamp of current data point
                            let t2 = fmtYr(new Date(start)) + " " + current.id;
                            let d2 = new Date(t2);
                            // offset day if hours before axis start
                            if (d2.getHours() < 20)
                                d2 = d3.time.day.offset(d2, +1);

                            // if tick corresponds to a data record
                            if ((d2 - last) === 0) {
                                let val = current.value;

                                //if (sonar) val = val * 10;
                                val = scale(val);

                                // mark unset/awake values as negative
                                if (val <= DATA_UNSET) val = -5;
                                //else if (val <= DATA_CUTOFF) val = NaN;

                                values.push(val);
                                current = newset.shift();

                                // interpolation
                                while (interpolations.length > 0) interpolations.pop();
                                /*if (current)
                                {
                                let val2 = current.value;
                                let interpolator = d3.interpolateNumber(val, val2);
                                interpolations = d3.quantize(interpolator,7);
                                interpolations.pop();
                                interpolations.shift();

                                }*/
                                while (interpolations.length < DATA_INTERVAL) {
                                    // @todo[vanch3d] Try linear or spline interpolation
                                    interpolations.push(val);
                                }
                            }
                            else if (interpolations.length > 0) {
                                let interp = interpolations.shift();
                                values.push(interp);
                            }
                            else
                                values.push(NaN);

                        }
                        last += step;
                    }
                    callback(null, values = values.slice((start - stop) / step));
                }, fmtTitle(date));
                return metric;
            }


        });
    </script>
{% endblock %}

