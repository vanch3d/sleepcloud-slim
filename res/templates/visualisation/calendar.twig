{% extends 'base.twig' %}

{% block title %}Calendar{% endblock %}

{% block content %}
    <div id="controller" class="d-flex p-2 flex-row" style="width: 100%;">
        <div class="w-50 p-3">
            <div data-toggle="buttons">
                <div class="btn-group btn-group-toggle" >
                    <label class="btn btn-secondary active">
                        <input type="radio" name="options" value="rating" autocomplete="off" checked> Rating
                    </label>
                    <label class="btn btn-secondary">
                        <input type="radio" name="options" value="sleep" autocomplete="off"> Duration
                    </label>
                    <label class="btn btn-secondary">
                        <input type="radio" name="options" value="deep" autocomplete="off"> Deep
                    </label>
                </div>
                <div class="btn-group btn-group-toggle" >
                    <label class="btn btn-secondary">
                        <input type="radio" name="options" value="fruit" autocomplete="off" checked> Fruit & Veg
                    </label>
                </div>
            </div>
        </div>
    </div>
    <div id="mapdiv" style="width: 100%;"></div>
    <div id="legend" style="width: 100%;"></div>
{% endblock %}

{% block injectCSS %}
    <style>
        #mapdiv{
            overflow-x: auto;
            overflow-y: hidden;
        }
        .cover-container {
            overflow-x: hidden;
        }
    </style>
{% endblock %}

{% block injectJS %}
    <script src="/js/d3.v4-bundle.js" ></script>
    <script>
        $(document).ready(function() {
            //$.key('ctrl+c', function() {});

            let color = d3.scaleQuantize()
                .domain([0, 5])
                .range(["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"]);

            let colorH = d3.scaleQuantize()
                .domain([0, 14])
                .range(["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"]);

            let ft = d3.timeFormat("%Y-%m-%d");

            d3.queue()
                .defer(d3.json, "{{ path_for('api.sleep.records') }}")
                .defer(d3.json, "{{ path_for('api.diet.records') }}")
                .defer(d3.json, "{{ path_for('api.diet.nutrient') }}")
                .await(function (error, sleep, food, info) {
                    if (error) throw error;
                    console.log("processing data ...");

                    let data = wrangleData(sleep.data,food.data, info.data);
                    let chart = createChart(data);

                    $("input[name='options']" ).change(function(){
                        let option = $( "input[name='options']:checked" ).val();
                        chart.dispatchUpdate(option);
                    });


                });

            function createChart(data) {
                console.log(data);

                // initialise the calendar chart
                let chart = d3.calendar()
                    .color(color)
                    .weeklySummary(true)
                    .mondayWeek(true);

                // generate the chart with the dataset and the selected element
                d3.select('#mapdiv')
                    .datum(data)
                    .call(chart);

                //let switches = chart.rollupKeys();
                return chart;
            }

            function wrangleData(sleep, food, info)
            {
                const foodType = info.reduce( (arr, item) => {
                    arr[item.id] = item;
                    return arr;
                } , {});

                let sleepData = d3.nest()
                    .key(function(d) {
                        return ft(new Date(d.To));
                    })
                    .rollup(function(d) {
                        // @todo[vanch3d] use average/sum?
                        let hours = +d[0].Hours,
                            adjust = +d[0].LenAdjust,
                            sleep = (hours*60 + adjust)/60,
                            dd = +d[0].DeepSleep,
                            deep = sleep * (dd<0?NaN:dd);

                        return {
                            rating : +d[0].Rating,
                            sleep  : +(sleep.toFixed(2)),
                            deep   : +(deep.toFixed(2)),
                            id     : d[0].Id
                        }; })
                    .object(sleep);
                //console.log(sleepData);

                let foodData = d3.nest()
                    .key(function(d) {
                        return ft(new Date(d.date));
                    })
                    .rollup(function(d) {

                        let allItems = d.map( item => item.items );
                        allItems = [].concat(...allItems);
                        allItems = allItems.map(
                            food => (foodType[food]) ? foodType[food].group : null);
                        return {
                            items: d3.nest()
                                .key(function(d){return d;})
                                .rollup(function(v){ return v.length;})
                                .object(allItems)

                        };
                    })
                    .object(food);
                console.log("food",foodData);

                for (let key in foodData)
                {
                    let type = (foodData[key]) ? foodData[key].items.FRUITVEG : 0;
                    if (sleepData[key])
                        sleepData[key].fruit = type;
                    else
                        sleepData[key] = { fruit: type};
                }

                return sleepData ;
            }

        });

    </script>
{% endblock %}
