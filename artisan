#!/usr/bin/env php
<?php
/**
 * Created by PhpStorm.
 * User: vanch3d <nicolas.github@calques3d.org>
 * Date: 22/05/2018
 * Time: 13:21
 */

use Cartalyst\Sentinel\Roles\IlluminateRoleRepository;
use Dotenv\Dotenv;
use Dotenv\Exception\InvalidPathException;
use Illuminate\Database\Capsule\Manager;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\DB;
use NVL\Models\User;
use Illuminate\Support\Facades\Schema as Schema;

defined('DS') || define('DS', DIRECTORY_SEPARATOR);
define('DIR', realpath(__DIR__ . './') . DS);

require DIR . './vendor/autoload.php';

try {
    (new Dotenv(__DIR__))->load();
} catch (InvalidPathException $e) {
    die($e);
}

$config = require_once DIR . './sources/config.php';

class artisan
{
    private $args;
    private $capsule;
    private $sentinel;
    private $config;

    function __construct($args,$config)
    {
        $this->args = $args;
        $this->config = $config;

        $this->capsule = new Manager;
        $this->capsule->addConnection($config['settings']['db']);
        $this->capsule->setAsGlobal();
        $this->capsule->bootEloquent();

        $this->sentinel = (new \Cartalyst\Sentinel\Native\Facades\Sentinel())->getSentinel();
        $this->sentinel->setUserRepository(
            new \Cartalyst\Sentinel\Users\IlluminateUserRepository(
                new Cartalyst\Sentinel\Hashing\BcryptHasher,
                new Illuminate\Events\Dispatcher,
                User::class
            )
        );

    }

    function help()
    {
        echo /** @lang text */
            "usage: php " . $this->args[0] . " <help|migrate|seed|clean> [<args>]\n";
    }

    function run()
    {
        if (count($this->args) <= 1) {
            $this->help();
            die();
        }


        switch ($this->args[1]) {
            case "migrate":
                $this->migrateUp();
                if (isset($this->args[2]) && $this->args[2] === '--seed')
                    $this->runSeed();
                break;
            case "seed":
                $this->runSeed();
                break;
            case "clean":
                $this->migrateDown();
                break;

            case "help":
            case "--help":
            default:
                $this->help();
                break;
        }

    }

    public function migrateUp()
    {
        echo "## running databases migration ..." . PHP_EOL ;

        $dbPath = $this->config['settings']['db']['database'];
        if (!file_exists($dbPath)) {
            mkdir(dirname($dbPath), 0777, true);
        }

        $migrationSentinel = new MigrationSentinel();
        $migrationSentinel->down();
        $migrationSentinel->up();

    }

    public function migrateDown()
    {
        echo "## running databases clean up ..." . PHP_EOL ;
        $migrationSentinel = new MigrationSentinel();
        $migrationSentinel->down();

    }

    public function runSeed()
    {
        echo "## running databases seeding ..." . PHP_EOL ;
        $seedSentinel = new SeedSentinel();
        $seedSentinel->run();
    }
}

$artisan = new artisan($argv,$config);
$artisan->run();
